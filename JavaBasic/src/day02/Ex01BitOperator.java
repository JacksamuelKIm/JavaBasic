package day02;
//비트 연산자
// 비트 연산자란 정수를 2진법 숫자로 변환하여
// 연산을 하는 연산자이다.

// 비트 연산자의 경우 한 가지 단점이 있는데
// 네트워크와 이미지처리 분야 외에는 잘 안쓰인다는 것이 단점이고
// 두 분야 모두 속도가 중요하기 때문에 자바보다는 C나 C++ 혹은 Python에서 사용된다.
public class Ex01BitOperator {
	public static void main(String[] args) {
		int number1 = 33;
		int number2 = 48;
		
		// 1. &연산
		//    두 자리가 모두 1일때만 1이 나오고 그 외에는 0이 나온다
		// 33은 2진법으로 0010 0001
		// 48은 2진법으로 0010 1000
		// &
		// -----------------------
		//            0010 0000
	System.out.println("number1 & number2: " + (number1 & number2));
		
		/* 2. | 연산
		 *   두 자리중 한자리라도 1이면 1
		 *   0010 0001
		 *   0010 1000
		 *   ----------------
		 *   0010 1001 = 49 
		 */
	System.out.println("number1 | number2: " + (number1 | number2));
	
		/* 3. ^ 연산
		 *   두 자리가 다르면 1 같으면 0
		 *   0010 0001
		 *   0010 1000
		 *   0000 1001 
		 */
	System.out.println("number1 ^ number2: " + (number1 ^ number2));
	
	   /* 4/ ~ 연산
	    * 숫자 하나에 대해 0은 1로 1은 0으로 바꾼다
	    * 0010 0001
	    * 1101 1110
	    *  
	    */
	System.out.println("~number1: " + ~number1);
	
		/*  5. << 연산
		 *  << 오른쪽에 나온 숫자만큼 자릿수를 왼쪽으로 이동하고
		 *  오른쪽에는 0으로 채우고 왼쪽은 잘라서 총 자릿수를 맞춰준다
		 *  33 << 3
		 *  0000 0000 0000 0000 0000 0000 0010 0001 << 3
		 *  0000 0000 0000 0000 0000 0000 0010 0001 000 
		 *  0 0000 0000 0000 0000 0000 0010 0001 000
		 *  0000 0000 0000 0000 0000 0001 0000 1000		 * 		 * 
		 */
	System.out.println("number1 << 3: " + (number1 << 3) );
	byte myByte = 33;
	System.out.println("myByte << 2 : " + (myByte << 2));
	
		/* 6. >> 연산
		 *    >> 오른쪽에 나온 숫자만큼 자릿수를 왼쪽으로 이동하되
		 *       - 일 경우 왼쪽 빈자리를 1, +일 경우엔 0으로 채운다.
		 * 0000 0000 0000 0000 0000 0000 0010 0001 >> 3
		 * 0000 0000 0000 0000 0000 0000 0000 0100 = 4.
		 */
	System.out.println("number1 > 3: "+ (number1 >> 3));
	
		/* 왼쪽 쉬프트 연산의 경우 2의 자릿수 제곱만큼 곱한 것과 같다.
		 * 오른쪽 쉬프트 연산의 경우 2의 자릿수 제곱만큼 나눈 것과 같다
		*/
	
		/* 7. >>> 연산
		 * >>> 연산은 앞의 빈 공간을 무조건 0으로 채운다. 즉 음의 정수도 양의 정수가 된다.
		 */
		myByte = -120;
		// 1000 1000 >>> 3
		// 0001 1000 = 17
		// 1111 1111 1111 1111 1111 1111 1000 1000
		// 0001 1111 1111 1111 1111 1111 1111 0111		
		System.out.println("myByte >>> 3: " + (byte)(myByte >>>3));
		
	
	
	} // main end

}
