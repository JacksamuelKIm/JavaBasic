1. 자바의 클래스와 객체에 대한 설명 중 틀린 것은?
	답: 4 (필드는 클래스 내에서 private보다 public으로 선언하는 게 바람직하다) - what?

2. 생성자에 대한 설명 중 틀린 것은?
	답: 	4 (생성자에서는 아무 값도 리턴하지 않기 때문에 return문을 사용할 수 없다.) -??

3. 다음 코드 중 오류가 있는 것은?
	답: 3 (Power p [10] = new Power [10];

4. 다음 코드에 대해 설명하는 문항 중 틀린 것은?
	Book [] book = new Book [10];	
	답: 2 (Book 객체가 10개 만들어진다.) - 객체가 아니라 Book 객체에 대한 레퍼런스(주소값)가 10개 만들어진다
	
5. 다음 중 메소드 오버로딩에 실패한 사례는?
	답: 1 - 메소드 오버로딩에서 리턴타입이나 접근지정자는 아무런 차이를 두지 못한다. 중요한 것은 메소드 이름이 동일하고(1) 매개변수의 숫자(2)와 타입(3)이 달라야 한다는 점
		class A {
			int x;
			void f(int a) {
				x = a;
			}
			int f(int b) {
				return x+b;
			}
		}

6. 다음 코드에 대해 답하라
	
	(1) this()를 이용하여 생성자를 수정하라
		- Exercise06 참조
 	(2) new TV();와 new TV("삼성");를 실행하면 실행결과는 각각 무엇인가?
 		=> "32인치 LG" 출력 / "32인치 삼성" 출력 
 	(3) 65인치 "삼성" TV객체를 생성하는 코드를 적어라
 		=> new TV(65, "삼성");
 	(4) this()를 이용하는 장점은 무엇인가?
 	  	=> ??
 	  	
 7. 다음 클래스에는 컴파일 오류가 있다. 오류 부분을 지적하고 오류를 수정할 수 있는 방법을 모두 제시하라.
 	그리고 그 중 객체 지향 프로그래밍에 가장 적합한 방법을 설명하라.
 	
 	답: 
 	  1) age의 접근 지정자(access modifier)를 public으로 바꾼다
 	  2) age에 static을 더해준다(?) => private이 있으므로 이것은 안됨
 	  3) Person 클래스의 생성자에서 age에 17이 부여될 수 있게 코드를 작성한다.
 	  4) age에 setter를 설정한다. (객체 지향적 방법)
 	  
 8. 다음 코드를 객체 지향 프로그래밍 관점에서 바람직한 코드로 수정하라.
 	(1)생성자 이용
 	(2)메소드 추가
 	
 	
 9. 다음은 객체 소멸에 대한 설명이다. 보기에서 빈칸에 적절한 말을 삽입하라.
 	자바에서는 객체를 임의로 소멸시킬 수 없으며, 이것은 개발자에게 매우 다행한 일
 	이다. 참조하는 레퍼런스가 하나도 없는 객체를 가비지라고 판단하고, 이를 가용
 	메모리로 자동 수집하는 가비지 컬렉션을 진행시킨다. 응용프로그램에서 자바 플랫폼
 	에게 이 과정을 지시하고자 하면 System.gc()코드를 호출하면 된다.
 	
 10. 다음 코드가 실행될 때 가비지가 발생하는가? 만약 발생한다면 발생하는 위치와 과정을 설명하라
 	(1) for문이 n=10이 될 때까지 s에 값을 할당하며 10회 반복하는데, 그 중 n=1~9 에서 생성된 s의 값은 모두 가비 
 	(2) 발생 x
 	
 11. 다음 클래스에서 멤버 함수의 사용이 잘못된 것은?
 	답: 4 -> static이 non-static 호출하므로 오류
 	
 12. 다음 코드에서 잘못된 문장은?
 	답: 1 -> static이 non-static 호출하므로 오류
 	
 13. 다음 소스에 틀린 부분이 있는지 판단하라. 만일 있다면 수정하라.
 	f()에 static을 더한다
 	
 14. 다음 코드에는 final과 관련하여 3가지 잘못된 것이 있다. 잘못된 내용을 설명하라.
 	답:
 		1) final 클래스는 상속 불가능
 		2) final 필드는 상수이므로 변경 불가능
 		3) final 메소드는 오버라이딩 불가능
 15. 
 	가비지란 더 이상 사용하지 않게된 객체나 배열의 메모리
 	가비지 컬렉션이 필요한 이유는 가비지가 쌓이게 되면 가용 메모리가 줄어들어서 최악의 경우 0까지 줄어들어서 프로그램 작동 못함
 	장점: 개발자 편의
 	단점: 실시간 처리 응용에는 부적합
 
 16. 
 		    default		public		protected		private
 같은 패키지		   O		  O				O				X     	
 다른 패키지		   X	      O				X				X